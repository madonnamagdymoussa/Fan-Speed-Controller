
MiniProject3_Version3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00002138  000021cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001a6  008001a6  00002312  2**0
                  ALLOC
  3 .stab         00001e54  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001826  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000598e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00005aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00007bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00008c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00009e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000a11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 0a 	call	0x1520	; 0x1520 <main>
      8a:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 10 	jmp	0x204c	; 0x204c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e7       	ldi	r22, 0x7D	; 125
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 26 10 	jmp	0x204c	; 0x204c <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	eb 57       	subi	r30, 0x7B	; 123
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_init>:
/************************************************************************/
/*                            function definitions                     */
/************************************************************************/


void ADC_init(const ADC_ConfigType *Config_Ptr){
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <ADC_init+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01

	/*Resetting the ADMUX register*/
		MADC_ADMUX=0;
     d7c:	e7 e2       	ldi	r30, 0x27	; 39
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	10 82       	st	Z, r1

		/*Resetting ADCSRA register*/
		 MADC_ADCSRA=0;
     d82:	e6 e2       	ldi	r30, 0x26	; 38
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	10 82       	st	Z, r1

		 /*Setting the Vref and resolution modes*/
	     MADC_ADMUX |=(Config_Ptr->ref_volt);
     d88:	a7 e2       	ldi	r26, 0x27	; 39
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e7 e2       	ldi	r30, 0x27	; 39
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	90 81       	ld	r25, Z
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	80 81       	ld	r24, Z
     d98:	89 2b       	or	r24, r25
     d9a:	8c 93       	st	X, r24

	    /*enable the adc*/
		SET_BIT(MADC_ADCSRA,ADC_Enable);
     d9c:	a6 e2       	ldi	r26, 0x26	; 38
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e6 e2       	ldi	r30, 0x26	; 38
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 68       	ori	r24, 0x80	; 128
     da8:	8c 93       	st	X, r24

		/*setting the pre_scalar*/
		/*for the adc will operate with a frequency ranging between 50Hz to 200Hz*/
	    MADC_ADCSRA |=(Config_Ptr->prescaler);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	90 81       	ld	r25, Z
     db4:	e9 81       	ldd	r30, Y+1	; 0x01
     db6:	fa 81       	ldd	r31, Y+2	; 0x02
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	89 2b       	or	r24, r25
     dbc:	8c 93       	st	X, r24

	/*Return from this function*/
				return;


}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <ADC_readChannel>:

u16_t ADC_readChannel(AdcChannel_t au8_adcChannel){
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01


	au8_adcChannel &= 0x07; /* channel number must be from 0 --> 7 */
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	87 70       	andi	r24, 0x07	; 7
     dd8:	89 83       	std	Y+1, r24	; 0x01

	MADC_ADMUX &= 0xE0; /*Resetting the selected ADC channel*/
     dda:	a7 e2       	ldi	r26, 0x27	; 39
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e7 e2       	ldi	r30, 0x27	; 39
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 7e       	andi	r24, 0xE0	; 224
     de6:	8c 93       	st	X, r24
	MADC_ADMUX |= au8_adcChannel; /*setting the selected ADC channel*/
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	90 81       	ld	r25, Z
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	89 2b       	or	r24, r25
     df6:	8c 93       	st	X, r24

    SET_BIT(MADC_ADCSRA,ADC_Start_Conversion); /*start converting the adc value */
     df8:	a6 e2       	ldi	r26, 0x26	; 38
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e6 e2       	ldi	r30, 0x26	; 38
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	8c 93       	st	X, r24

    while (BIT_IS_CLEAR(MADC_ADCSRA,ADC_Interrupt_Flag)); // wait for the adc to complete conversion --> polling takes 13 clock cycles so it is more efficient than interrupt
     e06:	e6 e2       	ldi	r30, 0x26	; 38
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	80 71       	andi	r24, 0x10	; 16
     e12:	90 70       	andi	r25, 0x00	; 0
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	b9 f3       	breq	.-18     	; 0xe06 <ADC_readChannel+0x3e>
    SET_BIT(MADC_ADCSRA,ADC_Interrupt_Flag); /*clear the flag bit after the conversion is complete */
     e18:	a6 e2       	ldi	r26, 0x26	; 38
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e6 e2       	ldi	r30, 0x26	; 38
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	8c 93       	st	X, r24

    return MADC_ADC;
     e26:	e4 e2       	ldi	r30, 0x24	; 36
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01

}
     e2e:	0f 90       	pop	r0
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <mdio_setPinStatus>:
 /************************************************************************/
 /*                           Functions definitions                      */
 /************************************************************************/


void mdio_setPinStatus(DioPort_t au8_port, DioChannel_t au8_pin, DioPinState_t au8_status){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <mdio_setPinStatus+0x6>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <mdio_setPinStatus+0x8>
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	6a 83       	std	Y+2, r22	; 0x02
     e48:	4b 83       	std	Y+3, r20	; 0x03
    //assert((au8_port>=MIN_NUM_PORT) && (au8_port <= MAX_NUM_PORT));
   // assert((au8_pin >= MIN_NUM_PIN) && (au8_pin  <= MAX_NUM_PIN));
   // assert((au8_status >= DIO_MIN_STATE_VALUE) && (au8_status <= DIO_MAX_STATE_VALUE));


	switch(au8_status){
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3d 83       	std	Y+5, r19	; 0x05
     e52:	2c 83       	std	Y+4, r18	; 0x04
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	d1 f1       	breq	.+116    	; 0xed2 <mdio_setPinStatus+0x9c>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <mdio_setPinStatus+0x34>
     e68:	64 c0       	rjmp	.+200    	; 0xf32 <mdio_setPinStatus+0xfc>
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	09 f0       	breq	.+2      	; 0xe74 <mdio_setPinStatus+0x3e>
     e72:	bd c0       	rjmp	.+378    	; 0xfee <mdio_setPinStatus+0x1b8>

	    case DIO_OUTPUT_PIN: /*   */

		      SET_BIT(*DIO_PORT_REG[au8_port][DDR],(au8_pin));  /*accessing the DDR register of a specific port */
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	c9 01       	movw	r24, r18
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	fc 01       	movw	r30, r24
     e8a:	eb 57       	subi	r30, 0x7B	; 123
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	a0 81       	ld	r26, Z
     e90:	b1 81       	ldd	r27, Z+1	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	c9 01       	movw	r24, r18
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	82 0f       	add	r24, r18
     ea0:	93 1f       	adc	r25, r19
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	fc 01       	movw	r30, r24
     ea8:	eb 57       	subi	r30, 0x7B	; 123
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	01 90       	ld	r0, Z+
     eae:	f0 81       	ld	r31, Z
     eb0:	e0 2d       	mov	r30, r0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <mdio_setPinStatus+0x92>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <mdio_setPinStatus+0x8e>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	8e c0       	rjmp	.+284    	; 0xfee <mdio_setPinStatus+0x1b8>
		       break; /* break from the DIO_OUTPUT_PIN  case */  /* example --> *DIO_PORT_REG[PORTA][DDR]  */

	    case DIO_INPUT_FLOAT_PIN: /*can  */

	    	 CLEAR_BIT(*DIO_PORT_REG[au8_port][DDR],(au8_pin));  /*accessing the DDR register of a specific port*/
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	c9 01       	movw	r24, r18
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	fc 01       	movw	r30, r24
     ee8:	eb 57       	subi	r30, 0x7B	; 123
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	a0 81       	ld	r26, Z
     eee:	b1 81       	ldd	r27, Z+1	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	c9 01       	movw	r24, r18
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	fc 01       	movw	r30, r24
     f06:	eb 57       	subi	r30, 0x7B	; 123
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	01 90       	ld	r0, Z+
     f0c:	f0 81       	ld	r31, Z
     f0e:	e0 2d       	mov	r30, r0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <mdio_setPinStatus+0xf0>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <mdio_setPinStatus+0xec>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	5e c0       	rjmp	.+188    	; 0xfee <mdio_setPinStatus+0x1b8>
	    	  break;/* break from the DIO_INPUT_FLOAT_PIN case  */


	    case DIO_INPUT_PULLUP_PIN:

	    	CLEAR_BIT(*DIO_PORT_REG[au8_port][DDR],(au8_pin) ); /*accessing the DDR register of a specific port*/
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	c9 01       	movw	r24, r18
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	82 0f       	add	r24, r18
     f40:	93 1f       	adc	r25, r19
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	fc 01       	movw	r30, r24
     f48:	eb 57       	subi	r30, 0x7B	; 123
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	a0 81       	ld	r26, Z
     f4e:	b1 81       	ldd	r27, Z+1	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	c9 01       	movw	r24, r18
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	fc 01       	movw	r30, r24
     f66:	eb 57       	subi	r30, 0x7B	; 123
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	01 90       	ld	r0, Z+
     f6c:	f0 81       	ld	r31, Z
     f6e:	e0 2d       	mov	r30, r0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <mdio_setPinStatus+0x14e>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <mdio_setPinStatus+0x14a>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
			SET_BIT(*DIO_PORT_REG[au8_port][PORT],(au8_pin)) ;  /*accessing the PORT register of a specific port*/
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	c9 01       	movw	r24, r18
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	fc 01       	movw	r30, r24
     fa6:	eb 57       	subi	r30, 0x7B	; 123
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	a0 81       	ld	r26, Z
     fac:	b1 81       	ldd	r27, Z+1	; 0x01
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	c9 01       	movw	r24, r18
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	fc 01       	movw	r30, r24
     fc6:	eb 57       	subi	r30, 0x7B	; 123
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	01 90       	ld	r0, Z+
     fcc:	f0 81       	ld	r31, Z
     fce:	e0 2d       	mov	r30, r0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <mdio_setPinStatus+0x1b0>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <mdio_setPinStatus+0x1ac>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
             break; /* break from the DIO_INPUT_PULLUP_PIN case*/
	}
	  return;
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <mdio_setPinValue>:



void mdio_setPinValue(DioPort_t au8_port, DioChannel_t au8_pin, DioOutputValue_t au8_value){
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <mdio_setPinValue+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <mdio_setPinValue+0x8>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	6a 83       	std	Y+2, r22	; 0x02
    1010:	4b 83       	std	Y+3, r20	; 0x03

	//assert((au8_port>=MIN_NUM_PORT) && (au8_port <= MAX_NUM_PORT));
	//assert((au8_pin >= MIN_NUM_PIN) && (au8_pin  <= MAX_NUM_PIN));
    //assert((au8_value == DIO_HIGH)||(au8_value == DIO_LOW));

	switch(au8_value){
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	31 f0       	breq	.+12     	; 0x1030 <mdio_setPinValue+0x32>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	21 30       	cpi	r18, 0x01	; 1
    102a:	31 05       	cpc	r19, r1
    102c:	99 f1       	breq	.+102    	; 0x1094 <mdio_setPinValue+0x96>
    102e:	62 c0       	rjmp	.+196    	; 0x10f4 <mdio_setPinValue+0xf6>

	case DIO_LOW_OUTPUT:
		CLEAR_BIT(*DIO_PORT_REG[au8_port][PORT],(au8_pin)) ;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	fc 01       	movw	r30, r24
    1048:	eb 57       	subi	r30, 0x7B	; 123
    104a:	fe 4f       	sbci	r31, 0xFE	; 254
    104c:	a0 81       	ld	r26, Z
    104e:	b1 81       	ldd	r27, Z+1	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	c9 01       	movw	r24, r18
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	82 0f       	add	r24, r18
    105e:	93 1f       	adc	r25, r19
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	fc 01       	movw	r30, r24
    1068:	eb 57       	subi	r30, 0x7B	; 123
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	01 90       	ld	r0, Z+
    106e:	f0 81       	ld	r31, Z
    1070:	e0 2d       	mov	r30, r0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <mdio_setPinValue+0x8a>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <mdio_setPinValue+0x86>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	30 c0       	rjmp	.+96     	; 0x10f4 <mdio_setPinValue+0xf6>
		break; /* break from the DIO_LOW_OUTPUT case*/

	case DIO_HIGH_OUTPUT:
		SET_BIT(*DIO_PORT_REG[au8_port][PORT],(au8_pin)) ;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	fc 01       	movw	r30, r24
    10ac:	eb 57       	subi	r30, 0x7B	; 123
    10ae:	fe 4f       	sbci	r31, 0xFE	; 254
    10b0:	a0 81       	ld	r26, Z
    10b2:	b1 81       	ldd	r27, Z+1	; 0x01
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	c9 01       	movw	r24, r18
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	82 0f       	add	r24, r18
    10c2:	93 1f       	adc	r25, r19
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	fc 01       	movw	r30, r24
    10cc:	eb 57       	subi	r30, 0x7B	; 123
    10ce:	fe 4f       	sbci	r31, 0xFE	; 254
    10d0:	01 90       	ld	r0, Z+
    10d2:	f0 81       	ld	r31, Z
    10d4:	e0 2d       	mov	r30, r0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <mdio_setPinValue+0xee>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <mdio_setPinValue+0xea>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
		break; /* break from the DIO_HIGH_OUTPUT case*/
	}
	return;
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <mdio_togglePinValue>:



void mdio_togglePinValue(DioPort_t au8_port, DioChannel_t au8_pin){
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <mdio_togglePinValue+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6a 83       	std	Y+2, r22	; 0x02

	//assert((au8_port>=MIN_NUM_PORT) && (au8_port <= MAX_NUM_PORT));
	//assert((au8_pin >= MIN_NUM_PIN) && (au8_pin  <= MAX_NUM_PIN));

	TOGGLE_BIT(*DIO_PORT_REG[au8_port][PORT],(au8_pin));
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	c9 01       	movw	r24, r18
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	fc 01       	movw	r30, r24
    112a:	eb 57       	subi	r30, 0x7B	; 123
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	a0 81       	ld	r26, Z
    1130:	b1 81       	ldd	r27, Z+1	; 0x01
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	c9 01       	movw	r24, r18
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	fc 01       	movw	r30, r24
    114a:	eb 57       	subi	r30, 0x7B	; 123
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	01 90       	ld	r0, Z+
    1150:	f0 81       	ld	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <mdio_togglePinValue+0x66>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <mdio_togglePinValue+0x62>
    116e:	84 27       	eor	r24, r20
    1170:	8c 93       	st	X, r24
	return;
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <mdio_getPinValue>:


u8_t mdio_getPinValue(DioPort_t au8_port, DioChannel_t au8_pin){
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <mdio_getPinValue+0x6>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	6b 83       	std	Y+3, r22	; 0x03

	//assert((au8_port>=MIN_NUM_PORT) && (au8_port <= MAX_NUM_PORT));
	//assert((au8_pin >= MIN_NUM_PIN) && (au8_pin  <= MAX_NUM_PIN));

	u8_t value=0;
    118c:	19 82       	std	Y+1, r1	; 0x01


		if(GET_BIT(*DIO_PORT_REG[au8_port][PORT],(au8_pin))){
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	fc 01       	movw	r30, r24
    11a6:	eb 57       	subi	r30, 0x7B	; 123
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	01 90       	ld	r0, Z+
    11ac:	f0 81       	ld	r31, Z
    11ae:	e0 2d       	mov	r30, r0
    11b0:	80 81       	ld	r24, Z
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <mdio_getPinValue+0x48>
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <mdio_getPinValue+0x44>
    11c8:	ca 01       	movw	r24, r20
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	90 70       	andi	r25, 0x00	; 0
    11ce:	88 23       	and	r24, r24
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <mdio_getPinValue+0x5c>


		value=DIO_HIGH_OUTPUT;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <mdio_getPinValue+0x5e>
		}

		else{

		value=DIO_LOW_OUTPUT;
    11d8:	19 82       	std	Y+1, r1	; 0x01
		}

	return value;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(DioPort_t au8_port, GPIO_PortDirectionType au8_direction){
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_setupPortDirection+0x6>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	6a 83       	std	Y+2, r22	; 0x02

	*DIO_PORT_REG[au8_port][DDR]=au8_direction;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	c9 01       	movw	r24, r18
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	eb 57       	subi	r30, 0x7B	; 123
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	01 90       	ld	r0, Z+
    1212:	f0 81       	ld	r31, Z
    1214:	e0 2d       	mov	r30, r0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24

}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <GPIO_writePort>:

void GPIO_writePort(u8_t au8_port, u8_t au8_value){
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <GPIO_writePort+0x6>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02

	*DIO_PORT_REG[au8_port][PORT]=au8_value;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	fc 01       	movw	r30, r24
    124a:	eb 57       	subi	r30, 0x7B	; 123
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	01 90       	ld	r0, Z+
    1250:	f0 81       	ld	r31, Z
    1252:	e0 2d       	mov	r30, r0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	80 83       	st	Z, r24

}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <GPIO_readPort>:

u8_t GPIO_readPort(u8_t au8_port){
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <GPIO_readPort+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	8a 83       	std	Y+2, r24	; 0x02

	u8_t au8_value = DIO_LOW_OUTPUT;
    126e:	19 82       	std	Y+1, r1	; 0x01

	au8_value=*DIO_PORT_REG[au8_port][PIN];
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	c9 01       	movw	r24, r18
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	fc 01       	movw	r30, r24
    1286:	e7 57       	subi	r30, 0x77	; 119
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	01 90       	ld	r0, Z+
    128c:	f0 81       	ld	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	80 81       	ld	r24, Z
    1292:	89 83       	std	Y+1, r24	; 0x01

	return  au8_value;
    1294:	89 81       	ldd	r24, Y+1	; 0x01

}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	mdio_setPinStatus(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_OUTPUT_PIN);
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
	mdio_setPinStatus(LCD_RW_PORT_ID,LCD_RW_PIN_ID,DIO_OUTPUT_PIN);
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
	mdio_setPinStatus(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_OUTPUT_PIN);
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	6f ef       	ldi	r22, 0xFF	; 255
    12ca:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    12ce:	88 e3       	ldi	r24, 0x38	; 56
    12d0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    12d4:	8c e0       	ldi	r24, 0x0C	; 12
    12d6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(u8_t command)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
	//u8_t lcd_port_value = 0;
	mdio_setPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_LOW_OUTPUT); /* Instruction Mode RS=0 */
    12f2:	83 e0       	ldi	r24, 0x03	; 3
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	mdio_setPinValue(LCD_RW_PORT_ID,LCD_RW_PIN_ID,DIO_LOW_OUTPUT); /* write data to LCD so RW=0 */
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>

	/*
	What really matters is that all these signals must be stable for a minimum or a maximum period of time.
	For example lines RS and R/W must be stable for a minimum period of time
	before level logic on the 'E' line is raised to a logic 1.*/
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>


	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_HIGH_OUTPUT); /* Enable LCD E=1 */
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	62 e0       	ldi	r22, 0x02	; 2
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
		 * minimum time of 190ns to stabilize the signal to
		 *ensure that Enable signal is high before reading the data signal
		 *NOTE ---> the enable pin must be high in order to read and send the data signal to the buffer
		 *The equation for calculating that time Tpw - Tdws */

	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1); /* delay for processing Tdsw = 100ns */
	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_LOW_OUTPUT); /* Disable LCD E=0 */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	69 81       	ldd	r22, Y+1	; 0x01
    1328:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePort>
	//_delay_ms(1); /* delay for processing Tdsw = 100ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>
	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_LOW_OUTPUT); /* Disable LCD E=0 */
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	62 e0       	ldi	r22, 0x02	; 2
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	//_delay_ms(1); /* delay for processing Th = 13ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>
#endif
}
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(u8_t data)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	89 83       	std	Y+1, r24	; 0x01
	//u8_t lcd_port_value = 0;
	mdio_setPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_HIGH_OUTPUT); /* Data Mode RS=1 */
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	mdio_setPinValue(LCD_RW_PORT_ID,LCD_RW_PIN_ID,DIO_LOW_OUTPUT); /* write data to LCD so RW=0 */
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>

	//_delay_ms(1); /* delay for processing Tas = 50ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>

	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_HIGH_OUTPUT); /* Enable LCD E=1 */
    137c:	83 e0       	ldi	r24, 0x03	; 3
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	//_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1); /* delay for processing Tdsw = 100ns */
	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_LOW_OUTPUT); /* Disable LCD E=0 */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	0e 94 12 09 	call	0x1224	; 0x1224 <GPIO_writePort>

	//_delay_ms(1); /* delay for processing Tdsw = 100ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>

	mdio_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_LOW_OUTPUT); /* Disable LCD E=0 */
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	//_delay_ms(1); /* delay for processing Th = 13ns */
	mtimer_delayMs_sync(MTIMER_CHANNEL_1, 1);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <mtimer_delayMs_sync>
#endif
}
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <LCD_displayString+0x6>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9b 83       	std	Y+3, r25	; 0x03
    13cc:	8a 83       	std	Y+2, r24	; 0x02
	u8_t i = 0;
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	0e c0       	rjmp	.+28     	; 0x13ee <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	9b 81       	ldd	r25, Y+3	; 0x03
    13dc:	fc 01       	movw	r30, r24
    13de:	e2 0f       	add	r30, r18
    13e0:	f3 1f       	adc	r31, r19
    13e2:	80 81       	ld	r24, Z
    13e4:	0e 94 a9 09 	call	0x1352	; 0x1352 <LCD_displayCharacter>
		i++;
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	u8_t i = 0;
	while(Str[i] != '\0')
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	fc 01       	movw	r30, r24
    13fa:	e2 0f       	add	r30, r18
    13fc:	f3 1f       	adc	r31, r19
    13fe:	80 81       	ld	r24, Z
    1400:	88 23       	and	r24, r24
    1402:	39 f7       	brne	.-50     	; 0x13d2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(u8_t row,u8_t col)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <LCD_moveCursor+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <LCD_moveCursor+0x8>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	6b 83       	std	Y+3, r22	; 0x03
	u8_t lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3d 83       	std	Y+5, r19	; 0x05
    142a:	2c 83       	std	Y+4, r18	; 0x04
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	9d 81       	ldd	r25, Y+5	; 0x05
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	c1 f0       	breq	.+48     	; 0x1466 <LCD_moveCursor+0x56>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <LCD_moveCursor+0x3a>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <LCD_moveCursor+0x50>
    1448:	19 c0       	rjmp	.+50     	; 0x147c <LCD_moveCursor+0x6c>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	69 f0       	breq	.+26     	; 0x146e <LCD_moveCursor+0x5e>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	61 f0       	breq	.+24     	; 0x1476 <LCD_moveCursor+0x66>
    145e:	0e c0       	rjmp	.+28     	; 0x147c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	0b c0       	rjmp	.+22     	; 0x147c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	80 5c       	subi	r24, 0xC0	; 192
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	07 c0       	rjmp	.+14     	; 0x147c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	80 5f       	subi	r24, 0xF0	; 240
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	03 c0       	rjmp	.+6      	; 0x147c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	80 5b       	subi	r24, 0xB0	; 176
    147a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	80 68       	ori	r24, 0x80	; 128
    1480:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(u8_t row,u8_t col,const char *Str)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <LCD_displayStringRowColumn+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <LCD_displayStringRowColumn+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	6a 83       	std	Y+2, r22	; 0x02
    14a4:	5c 83       	std	Y+4, r21	; 0x04
    14a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	6a 81       	ldd	r22, Y+2	; 0x02
    14ac:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_displayString>
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	62 97       	sbiw	r28, 0x12	; 18
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	9a 8b       	std	Y+18, r25	; 0x12
    14dc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    14de:	89 89       	ldd	r24, Y+17	; 0x11
    14e0:	9a 89       	ldd	r25, Y+18	; 0x12
    14e2:	9e 01       	movw	r18, r28
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	b9 01       	movw	r22, r18
    14ea:	4a e0       	ldi	r20, 0x0A	; 10
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 55 10 	call	0x20aa	; 0x20aa <itoa>
   LCD_displayString(buff); /* Display the string */
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_displayString>
}
    14fa:	62 96       	adiw	r28, 0x12	; 18
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_sendCommand>
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <main>:
#include"lcd.h"
#include"motor.h"
#include"temperature_sensor.h"


int main(void){
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <main+0x6>
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62

 	u8_t temperature; /*the temperature value will not be initialized
 	                   //because the first value read by the sensor will be it's initial value*/


    ADC_ConfigType ADC_Config={ MADC_INT_VREF_2_56V,MADC_PRE_8}; /* the values of ADC_Config could not be changed during runtime*/
    152c:	80 ec       	ldi	r24, 0xC0	; 192
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	8b 83       	std	Y+3, r24	; 0x03
 	ADC_init(&ADC_Config); /* initialize the pointer to structure */
    1534:	ce 01       	movw	r24, r28
    1536:	02 96       	adiw	r24, 0x02	; 2
    1538:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_init>





	mtimer_init(MTIMER_CHANNEL_0, MTIMER_PWM_MODE, MTIMER_PWM_PRESCALER); /*initialize timer 0 for the pwm signals */
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	42 e0       	ldi	r20, 0x02	; 2
    1542:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <mtimer_init>
	mtimer_init(MTIMER_CHANNEL_1, MTIMER_DELAY_MODE, MTIMER1_DELAY_PRESCALER); /*initialize timer 1 for lcd */
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	42 e0       	ldi	r20, 0x02	; 2
    154c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <mtimer_init>

	DcMotor_Init();
    1550:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DcMotor_Init>

	LCD_init();
    1554:	0e 94 50 09 	call	0x12a0	; 0x12a0 <LCD_init>
	LCD_clearScreen(); /* clear LCD at the beginning */
    1558:	0e 94 86 0a 	call	0x150c	; 0x150c <LCD_clearScreen>

	LCD_displayStringRowColumn(0,2, "FAN is "); /* this value will be displayed during the whole program  */
    155c:	20 e6       	ldi	r18, 0x60	; 96
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	a9 01       	movw	r20, r18
    1566:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,2, "Temp =    C"); /* this value will be displayed during the whole program  */
    156a:	28 e6       	ldi	r18, 0x68	; 104
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	a9 01       	movw	r20, r18
    1574:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>


	for(; ;){


		 		temperature= LM35_getTemperature(); /* continuously reading the temperature from the sensor using adc */
    1578:	0e 94 0e 0c 	call	0x181c	; 0x181c <LM35_getTemperature>
    157c:	89 83       	std	Y+1, r24	; 0x01


		       if(temperature<30)
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	8e 31       	cpi	r24, 0x1E	; 30
    1582:	30 f5       	brcc	.+76     	; 0x15d0 <main+0xb0>
		 		{
		 			LCD_displayStringRowColumn(0,9, "OFF"); /* print the current state of the motor  */
    1584:	24 e7       	ldi	r18, 0x74	; 116
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	69 e0       	ldi	r22, 0x09	; 9
    158c:	a9 01       	movw	r20, r18
    158e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			LCD_moveCursor(1,9);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	69 e0       	ldi	r22, 0x09	; 9
    1596:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
		 			LCD_intgerToString(temperature); /* Display the current temperature  */
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_intgerToString>
		 			LCD_displayStringRowColumn(1,11," ");
    15a4:	28 e7       	ldi	r18, 0x78	; 120
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	6b e0       	ldi	r22, 0x0B	; 11
    15ac:	a9 01       	movw	r20, r18
    15ae:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			if (temperature<10){
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	8a 30       	cpi	r24, 0x0A	; 10
    15b6:	38 f4       	brcc	.+14     	; 0x15c6 <main+0xa6>
		 				LCD_displayStringRowColumn(1,10," ");
    15b8:	28 e7       	ldi	r18, 0x78	; 120
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	6a e0       	ldi	r22, 0x0A	; 10
    15c0:	a9 01       	movw	r20, r18
    15c2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			}

		 			DcMotor_Rotate(DC_STOP,0,MTIMER_PWM_STOP);
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DcMotor_Rotate>


		 		}


		 		 if((temperature>=30)&&(temperature<60))
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	8e 31       	cpi	r24, 0x1E	; 30
    15d4:	30 f1       	brcs	.+76     	; 0x1622 <main+0x102>
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	8c 33       	cpi	r24, 0x3C	; 60
    15da:	18 f5       	brcc	.+70     	; 0x1622 <main+0x102>
		 		{
		 			LCD_displayStringRowColumn(0,9, "ON"); /* print the current state of the motor  */
    15dc:	2a e7       	ldi	r18, 0x7A	; 122
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	69 e0       	ldi	r22, 0x09	; 9
    15e4:	a9 01       	movw	r20, r18
    15e6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			LCD_displayStringRowColumn(0,11," ");
    15ea:	28 e7       	ldi	r18, 0x78	; 120
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	6b e0       	ldi	r22, 0x0B	; 11
    15f2:	a9 01       	movw	r20, r18
    15f4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			LCD_moveCursor(1,9);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	69 e0       	ldi	r22, 0x09	; 9
    15fc:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
		 			LCD_intgerToString(temperature); /* Display the current temperature  */
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_intgerToString>
		 			LCD_displayStringRowColumn(1,11," ");
    160a:	28 e7       	ldi	r18, 0x78	; 120
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	6b e0       	ldi	r22, 0x0B	; 11
    1612:	a9 01       	movw	r20, r18
    1614:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			DcMotor_Rotate(DC_CW,motor_speed_25,MTIMER_PWM_RUN);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	60 e4       	ldi	r22, 0x40	; 64
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DcMotor_Rotate>


		 		}

		 		 if((temperature>=60)&&(temperature<90)){
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	8c 33       	cpi	r24, 0x3C	; 60
    1626:	30 f1       	brcs	.+76     	; 0x1674 <main+0x154>
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	8a 35       	cpi	r24, 0x5A	; 90
    162c:	18 f5       	brcc	.+70     	; 0x1674 <main+0x154>
		 			LCD_displayStringRowColumn(0,9, "ON"); /* print the current state of the motor  */
    162e:	2a e7       	ldi	r18, 0x7A	; 122
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	69 e0       	ldi	r22, 0x09	; 9
    1636:	a9 01       	movw	r20, r18
    1638:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			LCD_displayStringRowColumn(0,11," ");
    163c:	28 e7       	ldi	r18, 0x78	; 120
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	6b e0       	ldi	r22, 0x0B	; 11
    1644:	a9 01       	movw	r20, r18
    1646:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			LCD_moveCursor(1,9);
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	69 e0       	ldi	r22, 0x09	; 9
    164e:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
		 			LCD_intgerToString(temperature); /* Display the current temperature  */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_intgerToString>
		 			LCD_displayStringRowColumn(1,11," ");
    165c:	28 e7       	ldi	r18, 0x78	; 120
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	6b e0       	ldi	r22, 0x0B	; 11
    1664:	a9 01       	movw	r20, r18
    1666:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			DcMotor_Rotate(DC_CW,motor_speed_50,MTIMER_PWM_RUN);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	60 e8       	ldi	r22, 0x80	; 128
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DcMotor_Rotate>

		 		}

		 		  if((temperature>=90)&&(temperature<120)){
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	8a 35       	cpi	r24, 0x5A	; 90
    1678:	48 f1       	brcs	.+82     	; 0x16cc <main+0x1ac>
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	88 37       	cpi	r24, 0x78	; 120
    167e:	30 f5       	brcc	.+76     	; 0x16cc <main+0x1ac>
		 			LCD_displayStringRowColumn(0,9, "ON"); /* print the current state of the motor  */
    1680:	2a e7       	ldi	r18, 0x7A	; 122
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	69 e0       	ldi	r22, 0x09	; 9
    1688:	a9 01       	movw	r20, r18
    168a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			LCD_displayStringRowColumn(0,11, " ");
    168e:	28 e7       	ldi	r18, 0x78	; 120
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	6b e0       	ldi	r22, 0x0B	; 11
    1696:	a9 01       	movw	r20, r18
    1698:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			LCD_moveCursor(1,9);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	69 e0       	ldi	r22, 0x09	; 9
    16a0:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
		 			LCD_intgerToString(temperature); /* Display the current temperature  */
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_intgerToString>

		 			if (temperature<100){
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	84 36       	cpi	r24, 0x64	; 100
    16b2:	38 f4       	brcc	.+14     	; 0x16c2 <main+0x1a2>

		 				LCD_displayStringRowColumn(1,11," ");
    16b4:	28 e7       	ldi	r18, 0x78	; 120
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	6b e0       	ldi	r22, 0x0B	; 11
    16bc:	a9 01       	movw	r20, r18
    16be:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			}

		 			DcMotor_Rotate(DC_CW,motor_speed_75,MTIMER_PWM_RUN);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	61 ec       	ldi	r22, 0xC1	; 193
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DcMotor_Rotate>

		 		}


		 		 if (temperature>=120){
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	88 37       	cpi	r24, 0x78	; 120
    16d0:	08 f4       	brcc	.+2      	; 0x16d4 <main+0x1b4>
    16d2:	52 cf       	rjmp	.-348    	; 0x1578 <main+0x58>
		 			LCD_displayStringRowColumn(0,9, "ON"); /* print the current state of the motor  */
    16d4:	2a e7       	ldi	r18, 0x7A	; 122
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	69 e0       	ldi	r22, 0x09	; 9
    16dc:	a9 01       	movw	r20, r18
    16de:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>
		 			LCD_displayStringRowColumn(0,11, " ");
    16e2:	28 e7       	ldi	r18, 0x78	; 120
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	6b e0       	ldi	r22, 0x0B	; 11
    16ea:	a9 01       	movw	r20, r18
    16ec:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCD_displayStringRowColumn>

		 			LCD_moveCursor(1,9);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	69 e0       	ldi	r22, 0x09	; 9
    16f4:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_moveCursor>
		 			LCD_intgerToString(temperature); /* Display the current temperature  */
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <LCD_intgerToString>

		 			DcMotor_Rotate(DC_CW,motor_speed_100,MTIMER_PWM_RUN);
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	6f ef       	ldi	r22, 0xFF	; 255
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <DcMotor_Rotate>
    170c:	35 cf       	rjmp	.-406    	; 0x1578 <main+0x58>

0000170e <DC_MOTOR_CLOCK_WISE>:

/* these functions are static because it is not allowded to be called by other files
 * it can be only called by other functions in this folder by using pointer to function or by normal calling of the function*/


void static  DC_MOTOR_CLOCK_WISE(void){
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62

	 mdio_setPinValue(PORTB_ID, PIN0_ID, DIO_HIGH_OUTPUT);  /* the output value of pin0  is 1 ---> INT1   */
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	 mdio_setPinValue(PORTB_ID, PIN1_ID, DIO_LOW_OUTPUT);   /* the output value of pin1  is 0 ---> INT2   */
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>

      return;/* return from this function*/

}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <DC_MOTOR_ANTI_CLOCK_WISE>:



void static  DC_MOTOR_ANTI_CLOCK_WISE(void){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62

	mdio_setPinValue(PORTB_ID, PIN0_ID, DIO_LOW_OUTPUT);/* the output value of pin0  is 0 ---> INT1  */
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	mdio_setPinValue(PORTB_ID, PIN1_ID, DIO_HIGH_OUTPUT);/* the output value of pin1  is 1 ---> INT2   */
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>

    return;/* return from this function*/
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <DC_MOTOR_STOP>:




void static DC_MOTOR_STOP(void){
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62

	mdio_setPinValue(PORTB_ID,PIN0_ID, DIO_LOW_OUTPUT); /* the output value of pin0  is 0 ---> INT1  */
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>
	mdio_setPinValue(PORTB_ID,PIN1_ID, DIO_LOW_OUTPUT);  /* the output value of pin1  is 0 ---> INT2   */
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>

	return;/* return from this function*/
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DcMotor_Init>:

/************************************************************************/
/*                             function definitions                     */
/************************************************************************/

void DcMotor_Init(void){
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62

	mdio_setPinStatus(PORTB_ID,PIN0_ID, DIO_OUTPUT_PIN);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB_ID,PIN1_ID, DIO_OUTPUT_PIN); /* the micro-controller supply voltage or current  to l23D so
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
	                                                         the direction of pins will be output*/

	(*pointer_stop)(); /*pointer to function for stopping the motor*/
    1790:	e0 91 a3 01 	lds	r30, 0x01A3
    1794:	f0 91 a4 01 	lds	r31, 0x01A4
    1798:	09 95       	icall

	}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotorState_t state,u8_t speed,u8_t au8_Operation)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <DcMotor_Rotate+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DcMotor_Rotate+0x8>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
    17b2:	4b 83       	std	Y+3, r20	; 0x03

	 (*pointer_dcmotor_pwmspeed)(MTIMER_CHANNEL_0,au8_Operation,speed);
    17b4:	e0 91 9d 01 	lds	r30, 0x019D
    17b8:	f0 91 9e 01 	lds	r31, 0x019E
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	6b 81       	ldd	r22, Y+3	; 0x03
    17c0:	4a 81       	ldd	r20, Y+2	; 0x02
    17c2:	09 95       	icall
	 //pointer_dcmotor_state[state];

    switch(state){
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3d 83       	std	Y+5, r19	; 0x05
    17cc:	2c 83       	std	Y+4, r18	; 0x04
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	79 f0       	breq	.+30     	; 0x17f6 <DcMotor_Rotate+0x56>
    17d8:	2c 81       	ldd	r18, Y+4	; 0x04
    17da:	3d 81       	ldd	r19, Y+5	; 0x05
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DcMotor_Rotate+0x62>
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	89 f4       	brne	.+34     	; 0x180c <DcMotor_Rotate+0x6c>

    case DC_CW:
    	(*pointer_clockWise)();/*pointer to function for rotating the  motor in clockwise direction*/
    17ea:	e0 91 9f 01 	lds	r30, 0x019F
    17ee:	f0 91 a0 01 	lds	r31, 0x01A0
    17f2:	09 95       	icall
    17f4:	0b c0       	rjmp	.+22     	; 0x180c <DcMotor_Rotate+0x6c>
    	//pointer_dcmotor_state[DC_CW];

    	break; /* break from this case */

   case DC_ACW:
    	(*pointer_antiClockWise)(); /*pointer to function for rotating the  motor in anti-clockwise direction*/
    17f6:	e0 91 a1 01 	lds	r30, 0x01A1
    17fa:	f0 91 a2 01 	lds	r31, 0x01A2
    17fe:	09 95       	icall
    1800:	05 c0       	rjmp	.+10     	; 0x180c <DcMotor_Rotate+0x6c>
	   //pointer_dcmotor_state[DC_ACW];

    	break;/* break from this case */

    case DC_STOP:
    	 (*pointer_stop)();         /*pointer to function for stopping the motor*/
    1802:	e0 91 a3 01 	lds	r30, 0x01A3
    1806:	f0 91 a4 01 	lds	r31, 0x01A4
    180a:	09 95       	icall

         break;/* break from this case */

        }

	 }
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <LM35_getTemperature>:
/*                            Definition                               */
/************************************************************************/


u8_t LM35_getTemperature()
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <LM35_getTemperature+0x6>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	u8_t temp_value = 0;
    1828:	1b 82       	std	Y+3, r1	; 0x03

	u16_t adc_value = 0;
    182a:	1a 82       	std	Y+2, r1	; 0x02
    182c:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(MADC_CHANNEL_2);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ADC_readChannel>
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/

	temp_value = (u8_t)(((u32_t)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	cc 01       	movw	r24, r24
    183e:	a0 e0       	ldi	r26, 0x00	; 0
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	26 e9       	ldi	r18, 0x96	; 150
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__mulsi3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	2a e0       	ldi	r18, 0x0A	; 10
    1868:	37 ed       	ldi	r19, 0xD7	; 215
    186a:	43 e2       	ldi	r20, 0x23	; 35
    186c:	50 e4       	ldi	r21, 0x40	; 64
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 ed       	ldi	r19, 0xD0	; 208
    187e:	4f eb       	ldi	r20, 0xBF	; 191
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8b 83       	std	Y+3, r24	; 0x03


	return temp_value;
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <RegisterCallback>:

/************************************************************************/
/*                          Functions' definitions                      */
/************************************************************************/

 void RegisterCallback (u8_t function_id, CallbackFunc_t p_callback_func ) {
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <RegisterCallback+0x6>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	7b 83       	std	Y+3, r23	; 0x03
    18b6:	6a 83       	std	Y+2, r22	; 0x02


     if ((0 < function_id) && (function_id <= FUNC_REGISTER_SIZE)) {
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 23       	and	r24, r24
    18bc:	f9 f0       	breq	.+62     	; 0x18fc <RegisterCallback+0x56>
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	e0 f4       	brcc	.+56     	; 0x18fc <RegisterCallback+0x56>

                     func_register[function_id].function_id = function_id;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	c9 01       	movw	r24, r18
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	82 0f       	add	r24, r18
    18d2:	93 1f       	adc	r25, r19
    18d4:	fc 01       	movw	r30, r24
    18d6:	e0 55       	subi	r30, 0x50	; 80
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	80 83       	st	Z, r24
                     func_register[function_id].gp_timer_callback_func = p_callback_func;
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	c9 01       	movw	r24, r18
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	82 0f       	add	r24, r18
    18ec:	93 1f       	adc	r25, r19
    18ee:	fc 01       	movw	r30, r24
    18f0:	ef 54       	subi	r30, 0x4F	; 79
    18f2:	fe 4f       	sbci	r31, 0xFE	; 254
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
            }
 }
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <__vector_19>:




ISR(TIMER0_COMP_vect)
     {
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	8f 93       	push	r24
    1914:	9f 93       	push	r25
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <__vector_19+0x14>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
     	func_register[TIMER0_ID].gp_timer_callback_func;
    1920:	80 91 b1 01 	lds	r24, 0x01B1
    1924:	90 91 b2 01 	lds	r25, 0x01B2
     }
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__vector_6>:


 ISR(TIMER1_COMPA_vect)
 {
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <__vector_6+0x14>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
 	func_register[TIMER1_ID].gp_timer_callback_func;
    1956:	80 91 b4 01 	lds	r24, 0x01B4
    195a:	90 91 b5 01 	lds	r25, 0x01B5
 }
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	9f 91       	pop	r25
    1968:	8f 91       	pop	r24
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <__vector_3>:


 ISR(TIMER2_COMP_vect)
     {
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <__vector_3+0x14>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
     	func_register[TIMER2_ID].gp_timer_callback_func;
    198c:	80 91 b7 01 	lds	r24, 0x01B7
    1990:	90 91 b8 01 	lds	r25, 0x01B8
     }
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	9f 91       	pop	r25
    199e:	8f 91       	pop	r24
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <mtimer_start>:


 void static mtimer_start(u8_t au8_timerChannel)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <mtimer_start+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
	/*Switching over timer channels*/
	switch(au8_timerChannel)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3b 83       	std	Y+3, r19	; 0x03
    19c0:	2a 83       	std	Y+2, r18	; 0x02
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <mtimer_start+0x2c>
    19ca:	2a 81       	ldd	r18, Y+2	; 0x02
    19cc:	3b 81       	ldd	r19, Y+3	; 0x03
    19ce:	21 30       	cpi	r18, 0x01	; 1
    19d0:	31 05       	cpc	r19, r1
    19d2:	71 f0       	breq	.+28     	; 0x19f0 <mtimer_start+0x46>
    19d4:	1a c0       	rjmp	.+52     	; 0x1a0a <mtimer_start+0x60>
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

			/*Resetting the timer counter*/
			MTIMER_TCNT0 = 0;
    19d6:	e2 e5       	ldi	r30, 0x52	; 82
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	10 82       	st	Z, r1

			/*Adding the previous selected timer prescaler*/
			MTIMER_TCCR0 |= gu8_timerSelectedPrescaler0;
    19dc:	a3 e5       	ldi	r26, 0x53	; 83
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e3 e5       	ldi	r30, 0x53	; 83
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	90 81       	ld	r25, Z
    19e6:	80 91 a6 01 	lds	r24, 0x01A6
    19ea:	89 2b       	or	r24, r25
    19ec:	8c 93       	st	X, r24
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <mtimer_start+0x60>

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:

            /*Reset the timer counter*/
            MTIMER_TCNT1 = 0;
    19f0:	ec e4       	ldi	r30, 0x4C	; 76
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	11 82       	std	Z+1, r1	; 0x01
    19f6:	10 82       	st	Z, r1

			/*Adding the previous selected timer prescaler*/
            MTIMER_TCCR1B |= gu8_timerSelectedPrescaler1;
    19f8:	ae e4       	ldi	r26, 0x4E	; 78
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ee e4       	ldi	r30, 0x4E	; 78
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	90 81       	ld	r25, Z
    1a02:	80 91 a7 01 	lds	r24, 0x01A7
    1a06:	89 2b       	or	r24, r25
    1a08:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <mtimer_stop>:

 void static mtimer_stop(u8_t au8_timerChannel)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <mtimer_stop+0x6>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
	/*Switching over timer channels*/
	switch(au8_timerChannel)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3b 83       	std	Y+3, r19	; 0x03
    1a2c:	2a 83       	std	Y+2, r18	; 0x02
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <mtimer_stop+0x2c>
    1a36:	2a 81       	ldd	r18, Y+2	; 0x02
    1a38:	3b 81       	ldd	r19, Y+3	; 0x03
    1a3a:	21 30       	cpi	r18, 0x01	; 1
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	49 f0       	breq	.+18     	; 0x1a52 <mtimer_stop+0x3c>
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <mtimer_stop+0x4a>
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

			/*Stopping the timer by removing the prescaler value*/
			MTIMER_TCCR0 &= MTIMER_NO_PRESCALING;
    1a42:	a3 e5       	ldi	r26, 0x53	; 83
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e3 e5       	ldi	r30, 0x53	; 83
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 7f       	andi	r24, 0xF8	; 248
    1a4e:	8c 93       	st	X, r24
    1a50:	07 c0       	rjmp	.+14     	; 0x1a60 <mtimer_stop+0x4a>

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:

            /*Stopping the timer by removing the prescaler value*/
			MTIMER_TCCR1B &= (0xF8);
    1a52:	ae e4       	ldi	r26, 0x4E	; 78
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	ee e4       	ldi	r30, 0x4E	; 78
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 7f       	andi	r24, 0xF8	; 248
    1a5e:	8c 93       	st	X, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <mtimer_init>:

void mtimer_init(u8_t au8_timerChannel, u8_t au8_timerMode, u8_t au8_timerPrescaler)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	29 97       	sbiw	r28, 0x09	; 9
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	6a 83       	std	Y+2, r22	; 0x02
    1a84:	4b 83       	std	Y+3, r20	; 0x03
	/*Switching over timer channels*/
	switch(au8_timerChannel)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	39 87       	std	Y+9, r19	; 0x09
    1a8e:	28 87       	std	Y+8, r18	; 0x08
    1a90:	88 85       	ldd	r24, Y+8	; 0x08
    1a92:	99 85       	ldd	r25, Y+9	; 0x09
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	a9 f1       	breq	.+106    	; 0x1b04 <mtimer_init+0x98>
    1a9a:	28 85       	ldd	r18, Y+8	; 0x08
    1a9c:	39 85       	ldd	r19, Y+9	; 0x09
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <mtimer_init+0x3a>
    1aa4:	5f c0       	rjmp	.+190    	; 0x1b64 <mtimer_init+0xf8>
    1aa6:	88 85       	ldd	r24, Y+8	; 0x08
    1aa8:	99 85       	ldd	r25, Y+9	; 0x09
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <mtimer_init+0x44>
    1aae:	5d c0       	rjmp	.+186    	; 0x1b6a <mtimer_init+0xfe>
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

			/*Switching over timer modes*/
			switch(au8_timerMode)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3f 83       	std	Y+7, r19	; 0x07
    1ab8:	2e 83       	std	Y+6, r18	; 0x06
    1aba:	8e 81       	ldd	r24, Y+6	; 0x06
    1abc:	9f 81       	ldd	r25, Y+7	; 0x07
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	31 f0       	breq	.+12     	; 0x1ace <mtimer_init+0x62>
    1ac2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ac4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ac6:	21 30       	cpi	r18, 0x01	; 1
    1ac8:	31 05       	cpc	r19, r1
    1aca:	51 f0       	breq	.+20     	; 0x1ae0 <mtimer_init+0x74>
    1acc:	17 c0       	rjmp	.+46     	; 0x1afc <mtimer_init+0x90>
					 * so  the frequency will be (10^6)/8 = 125,000
					 * the tick time is equal to 8*(10^-6)
					 *   125 * tick time = 1ms of delay
					 *
					 * */
					MTIMER_OCR0 = 125;
    1ace:	ec e5       	ldi	r30, 0x5C	; 92
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8d e7       	ldi	r24, 0x7D	; 125
    1ad4:	80 83       	st	Z, r24

					/*Setting the CTC mode and stopping the timer*/
					MTIMER_TCCR0 = (1<<TCCR0_WAVE_GENERATION_CTC) | (1<<TCCR0_FORCE_OUTPUT_COMPARE);
    1ad6:	e3 e5       	ldi	r30, 0x53	; 83
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 ec       	ldi	r24, 0xC0	; 192
    1adc:	80 83       	st	Z, r24
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <mtimer_init+0x90>

                /*In case of PWM mode*/
				case MTIMER_PWM_MODE:

               /*Setting Fast PWM with non inverting mode*/
                  MTIMER_TCCR0 = (1<<(TCCR0_WAVE_GENERATION_PWM))|(1<<(TCCR0_COMPARE_MATCH_01))|(1<<(TCCR0_WAVE_GENERATION_CTC));
    1ae0:	e3 e5       	ldi	r30, 0x53	; 83
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	88 e6       	ldi	r24, 0x68	; 104
    1ae6:	80 83       	st	Z, r24

                  mdio_setPinStatus(PORTB_ID, PIN3_ID, DIO_OUTPUT_PIN);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	63 e0       	ldi	r22, 0x03	; 3
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 1b 07 	call	0xe36	; 0xe36 <mdio_setPinStatus>
                  mdio_setPinValue(PORTB_ID, PIN3_ID, DIO_HIGH_OUTPUT);
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	63 e0       	ldi	r22, 0x03	; 3
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 ff 07 	call	0xffe	; 0xffe <mdio_setPinValue>


			}

            /*Setting the timer0 prescaler*/
			gu8_timerSelectedPrescaler0 = au8_timerPrescaler;
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	80 93 a6 01 	sts	0x01A6, r24
    1b02:	33 c0       	rjmp	.+102    	; 0x1b6a <mtimer_init+0xfe>

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:

			/*Switching over timer modes*/
			switch(au8_timerMode)
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	91 05       	cpc	r25, r1
    1b16:	11 f1       	breq	.+68     	; 0x1b5c <mtimer_init+0xf0>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	c9 f0       	breq	.+50     	; 0x1b54 <mtimer_init+0xe8>
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	c9 f4       	brne	.+50     	; 0x1b5c <mtimer_init+0xf0>
					 * so  the frequency will be (10^6)/8 = 125,000
					 * the tick time is equal to 8*(10^-6)
					 *   125 * tick time = 1ms of delay
					 *
					 * */
					 MTIMER_OCR1A = 125;
    1b2a:	ea e4       	ldi	r30, 0x4A	; 74
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8d e7       	ldi	r24, 0x7D	; 125
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24

					 /*non-pwm mode*/
					 SET_BIT(MTIMER_TCCR1A ,TCCR1A_FORCE_OUTPUT_COMPARE_CHANNELA);
    1b36:	af e4       	ldi	r26, 0x4F	; 79
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ef e4       	ldi	r30, 0x4F	; 79
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	8c 93       	st	X, r24

                     SET_BIT(MTIMER_TCCR1B,TCCR1B_WAVE_GENERATION_12);
    1b44:	ae e4       	ldi	r26, 0x4E	; 78
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ee e4       	ldi	r30, 0x4E	; 78
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 60       	ori	r24, 0x08	; 8
    1b50:	8c 93       	st	X, r24
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <mtimer_init+0xf0>

                /*In case of Input capture mode*/
				case MTIMER_INPUT_CAPT_MODE:

                    /*Setting the timer to operate at normal mode and ICU operates at falling edge (default)*/
                    MTIMER_TCCR1 = 0;
    1b54:	ee e4       	ldi	r30, 0x4E	; 78
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	11 82       	std	Z+1, r1	; 0x01
    1b5a:	10 82       	st	Z, r1
                    break;

			}

			/*Setting the timer1 prescaler*/
			gu8_timerSelectedPrescaler1 = au8_timerPrescaler;
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	80 93 a7 01 	sts	0x01A7, r24
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <mtimer_init+0xfe>

		/*In case of choosing timer channel 2*/
		case MTIMER_CHANNEL_2:

			/*Setting the timer2 prescaler*/
			gu8_timerSelectedPrescaler2 = au8_timerPrescaler;
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 93 a8 01 	sts	0x01A8, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1b6a:	29 96       	adiw	r28, 0x09	; 9
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <mtimer_delayMs_async>:

void mtimer_delayMs_async(u8_t au8_timerChannel, u16_t au16_timerInMillis,CallbackFunc_t p_callback_func)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	27 97       	sbiw	r28, 0x07	; 7
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	7b 83       	std	Y+3, r23	; 0x03
    1b94:	6a 83       	std	Y+2, r22	; 0x02
    1b96:	5d 83       	std	Y+5, r21	; 0x05
    1b98:	4c 83       	std	Y+4, r20	; 0x04
	/*Starting the timer with specific channel*/
	mtimer_start(au8_timerChannel);
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <mtimer_start>

	/*Enable the global interrupts*/
	SET_BIT(SREG, 7);
    1ba0:	af e5       	ldi	r26, 0x5F	; 95
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ef e5       	ldi	r30, 0x5F	; 95
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 68       	ori	r24, 0x80	; 128
    1bac:	8c 93       	st	X, r24

	/*Switching over timer channels*/
	switch(au8_timerChannel)
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3f 83       	std	Y+7, r19	; 0x07
    1bb6:	2e 83       	std	Y+6, r18	; 0x06
    1bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bba:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	e9 f0       	breq	.+58     	; 0x1bfc <mtimer_delayMs_async+0x80>
    1bc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	29 f1       	breq	.+74     	; 0x1c16 <mtimer_delayMs_async+0x9a>
    1bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bce:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f5       	brne	.+90     	; 0x1c2e <mtimer_delayMs_async+0xb2>
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

			/*Setting the delay time to be used in ISR*/
			gu16_delayTimeInMillis0 = au16_timerInMillis;
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	90 93 ab 01 	sts	0x01AB, r25
    1bdc:	80 93 aa 01 	sts	0x01AA, r24

			/*Setting the timer0 callback function*/
			 RegisterCallback (TIMER0_ID, p_callback_func );
    1be0:	2c 81       	ldd	r18, Y+4	; 0x04
    1be2:	3d 81       	ldd	r19, Y+5	; 0x05
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	b9 01       	movw	r22, r18
    1be8:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <RegisterCallback>

			/*Enabling the OC interrupt*/
			SET_BIT(MTIMER_TIMSK, 1);
    1bec:	a9 e5       	ldi	r26, 0x59	; 89
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e9 e5       	ldi	r30, 0x59	; 89
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	8c 93       	st	X, r24
    1bfa:	19 c0       	rjmp	.+50     	; 0x1c2e <mtimer_delayMs_async+0xb2>

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:

			/*Setting the delay time to be used in ISR*/
			gu16_delayTimeInMillis1 = au16_timerInMillis;
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	90 93 ad 01 	sts	0x01AD, r25
    1c04:	80 93 ac 01 	sts	0x01AC, r24

			/*Setting the timer1 callback function*/
			RegisterCallback (TIMER1_ID, p_callback_func );
    1c08:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <RegisterCallback>
    1c14:	0c c0       	rjmp	.+24     	; 0x1c2e <mtimer_delayMs_async+0xb2>

		/*In case of choosing timer channel 2*/
		case MTIMER_CHANNEL_2:

			/*Setting the delay time to be used in ISR*/
			gu16_delayTimeInMillis2 = au16_timerInMillis;
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	90 93 af 01 	sts	0x01AF, r25
    1c1e:	80 93 ae 01 	sts	0x01AE, r24

			/*Setting the timer2 callback function*/
			RegisterCallback (TIMER2_ID, p_callback_func );
    1c22:	2c 81       	ldd	r18, Y+4	; 0x04
    1c24:	3d 81       	ldd	r19, Y+5	; 0x05
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	b9 01       	movw	r22, r18
    1c2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <RegisterCallback>
			break;
	}

	/*Return from this function*/
	return;
}
    1c2e:	27 96       	adiw	r28, 0x07	; 7
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <mtimer_delayMs_sync>:

void mtimer_delayMs_sync(u8_t au8_timerChannel, u16_t au16_timerInMillis)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	27 97       	sbiw	r28, 0x07	; 7
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	7b 83       	std	Y+3, r23	; 0x03
    1c58:	6a 83       	std	Y+2, r22	; 0x02
	/*Starting the timer with specific channel*/
	mtimer_start(au8_timerChannel);
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <mtimer_start>

	/*Switching over timer channels*/
	switch(au8_timerChannel)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3f 83       	std	Y+7, r19	; 0x07
    1c68:	2e 83       	std	Y+6, r18	; 0x06
    1c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	b9 f0       	breq	.+46     	; 0x1ca0 <mtimer_delayMs_sync+0x60>
    1c72:	2e 81       	ldd	r18, Y+6	; 0x06
    1c74:	3f 81       	ldd	r19, Y+7	; 0x07
    1c76:	21 30       	cpi	r18, 0x01	; 1
    1c78:	31 05       	cpc	r19, r1
    1c7a:	a1 f1       	breq	.+104    	; 0x1ce4 <mtimer_delayMs_sync+0xa4>
    1c7c:	42 c0       	rjmp	.+132    	; 0x1d02 <mtimer_delayMs_sync+0xc2>

			/*Looping over the time in millis*/
			while(au16_timerInMillis--)
			{
				/*Waiting for timer compare match to happen*/
				while(GET_BIT(MTIMER_TIFR, 1) == 0);
    1c7e:	e8 e5       	ldi	r30, 0x58	; 88
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	86 95       	lsr	r24
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	81 70       	andi	r24, 0x01	; 1
    1c8c:	90 70       	andi	r25, 0x00	; 0
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	b1 f3       	breq	.-20     	; 0x1c7e <mtimer_delayMs_sync+0x3e>

				/*Clearing the OCF0 flag*/
				SET_BIT(MTIMER_TIFR, 1);
    1c92:	a8 e5       	ldi	r26, 0x58	; 88
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e8 e5       	ldi	r30, 0x58	; 88
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	82 60       	ori	r24, 0x02	; 2
    1c9e:	8c 93       	st	X, r24
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

			/*Looping over the time in millis*/
			while(au16_timerInMillis--)
    1ca0:	1d 82       	std	Y+5, r1	; 0x05
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <mtimer_delayMs_sync+0x6e>
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	3d 83       	std	Y+5, r19	; 0x05
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9b 83       	std	Y+3, r25	; 0x03
    1cb6:	8a 83       	std	Y+2, r24	; 0x02
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	88 23       	and	r24, r24
    1cbc:	01 f7       	brne	.-64     	; 0x1c7e <mtimer_delayMs_sync+0x3e>
    1cbe:	21 c0       	rjmp	.+66     	; 0x1d02 <mtimer_delayMs_sync+0xc2>
		case MTIMER_CHANNEL_1:
			/*Looping over the time in millis*/
						while(au16_timerInMillis--)
						{
							/*Waiting for timer compare match to happen*/
							while(GET_BIT(MTIMER_TIFR, 4) == 0);
    1cc0:	e8 e5       	ldi	r30, 0x58	; 88
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 95       	swap	r24
    1cc8:	8f 70       	andi	r24, 0x0F	; 15
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	90 70       	andi	r25, 0x00	; 0
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	a9 f3       	breq	.-22     	; 0x1cc0 <mtimer_delayMs_sync+0x80>

							/*Clearing the OCF0 flag*/
							SET_BIT(MTIMER_TIFR, 4);
    1cd6:	a8 e5       	ldi	r26, 0x58	; 88
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e8 e5       	ldi	r30, 0x58	; 88
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	80 61       	ori	r24, 0x10	; 16
    1ce2:	8c 93       	st	X, r24
			break;

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:
			/*Looping over the time in millis*/
						while(au16_timerInMillis--)
    1ce4:	1c 82       	std	Y+4, r1	; 0x04
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	11 f0       	breq	.+4      	; 0x1cf2 <mtimer_delayMs_sync+0xb2>
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	9c 83       	std	Y+4, r25	; 0x04
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	9b 83       	std	Y+3, r25	; 0x03
    1cfa:	8a 83       	std	Y+2, r24	; 0x02
    1cfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfe:	22 23       	and	r18, r18
    1d00:	f9 f6       	brne	.-66     	; 0x1cc0 <mtimer_delayMs_sync+0x80>
			/*Break from this case*/
			break;
	}

	/*Stopping the started timer channel*/
	mtimer_stop(au8_timerChannel);
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <mtimer_stop>

	/*Return from this function*/
	return;
}
    1d08:	27 96       	adiw	r28, 0x07	; 7
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <mtimer_pwmGenerate>:

void mtimer_pwmGenerate(u8_t au8_timerChannel, u8_t au8_pwmOperation, u8_t au8_dutyCycle)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	27 97       	sbiw	r28, 0x07	; 7
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	6a 83       	std	Y+2, r22	; 0x02
    1d32:	4b 83       	std	Y+3, r20	; 0x03
    /*Switching over PWM operation*/
    switch(au8_pwmOperation)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3f 83       	std	Y+7, r19	; 0x07
    1d3c:	2e 83       	std	Y+6, r18	; 0x06
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	9f 81       	ldd	r25, Y+7	; 0x07
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	91 f0       	breq	.+36     	; 0x1d6a <mtimer_pwmGenerate+0x50>
    1d46:	2e 81       	ldd	r18, Y+6	; 0x06
    1d48:	3f 81       	ldd	r19, Y+7	; 0x07
    1d4a:	21 30       	cpi	r18, 0x01	; 1
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	91 f4       	brne	.+36     	; 0x1d74 <mtimer_pwmGenerate+0x5a>
    {
        /*Running the PWM*/
        case MTIMER_PWM_RUN:

            /*Checking if the timer has started once or not*/
            if(gu8_pwmTimerIsRunning == 0)
    1d50:	80 91 a9 01 	lds	r24, 0x01A9
    1d54:	88 23       	and	r24, r24
    1d56:	71 f4       	brne	.+28     	; 0x1d74 <mtimer_pwmGenerate+0x5a>
            {
                /*Starting a specific timer channel*/
                mtimer_start(au8_timerChannel);
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <mtimer_start>

                /*Increase the timer is running variable*/
                gu8_pwmTimerIsRunning++;
    1d5e:	80 91 a9 01 	lds	r24, 0x01A9
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	80 93 a9 01 	sts	0x01A9, r24
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <mtimer_pwmGenerate+0x5a>

        /*Stopping the PWM*/
        case MTIMER_PWM_STOP:

            /*Stopping the timer*/
            mtimer_stop(au8_timerChannel);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <mtimer_stop>

            /*Reset the timer is running variable*/
            gu8_pwmTimerIsRunning = 0;
    1d70:	10 92 a9 01 	sts	0x01A9, r1
            break;
    }


	/*Switching over timer channels*/
	switch(au8_timerChannel)
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	3d 83       	std	Y+5, r19	; 0x05
    1d7c:	2c 83       	std	Y+4, r18	; 0x04
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	9d 81       	ldd	r25, Y+5	; 0x05
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <mtimer_pwmGenerate+0x78>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	21 30       	cpi	r18, 0x01	; 1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	31 f0       	breq	.+12     	; 0x1d9c <mtimer_pwmGenerate+0x82>
    1d90:	0c c0       	rjmp	.+24     	; 0x1daa <mtimer_pwmGenerate+0x90>
	{
		/*In case of choosing timer channel 0*/
		case MTIMER_CHANNEL_0:

            /*Setting the duty cycle value (0 - 255)*/
            MTIMER_OCR0 = au8_dutyCycle;
    1d92:	ec e5       	ldi	r30, 0x5C	; 92
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	80 83       	st	Z, r24
    1d9a:	07 c0       	rjmp	.+14     	; 0x1daa <mtimer_pwmGenerate+0x90>

		/*In case of choosing timer channel 1*/
		case MTIMER_CHANNEL_1:

			/*Setting the duty cycle value (0 - 255)*/
			MTIMER_OCR1A = au8_dutyCycle;
    1d9c:	ea e4       	ldi	r30, 0x4A	; 74
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
			break;
	}

	/*Return from this function*/
	return;
}
    1daa:	27 96       	adiw	r28, 0x07	; 7
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <mtimer_getPwmStatus>:

void mtimer_getPwmStatus(u8_t* pu8_dutyCycle, u32_t* pu32_frequency)
{
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	2a 97       	sbiw	r28, 0x0a	; 10
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	98 87       	std	Y+8, r25	; 0x08
    1dda:	8f 83       	std	Y+7, r24	; 0x07
    1ddc:	7a 87       	std	Y+10, r23	; 0x0a
    1dde:	69 87       	std	Y+9, r22	; 0x09
    u16_t au16_t1;
    u16_t au16_t2;
    u16_t au16_t3;

    /*Trigger ICU at rising edge */
    SET_BIT(MTIMER_TCCR1, 6);
    1de0:	ae e4       	ldi	r26, 0x4E	; 78
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ee e4       	ldi	r30, 0x4E	; 78
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	80 64       	ori	r24, 0x40	; 64
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	9c 93       	st	X, r25
    1df2:	8e 93       	st	-X, r24

    /*Start timer channel 1*/
    mtimer_start(MTIMER_CHANNEL_1);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <mtimer_start>

    /*Waiting for selected edge to trigger ICU*/
    while(GET_BIT(MTIMER_TIFR, 5) == 0);
    1dfa:	e8 e5       	ldi	r30, 0x58	; 88
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	82 95       	swap	r24
    1e02:	86 95       	lsr	r24
    1e04:	87 70       	andi	r24, 0x07	; 7
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	81 70       	andi	r24, 0x01	; 1
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	a1 f3       	breq	.-24     	; 0x1dfa <mtimer_getPwmStatus+0x3e>

    /*Clearing ICF1 flag*/
    SET_BIT(MTIMER_TIFR, 5);
    1e12:	a8 e5       	ldi	r26, 0x58	; 88
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e5       	ldi	r30, 0x58	; 88
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 62       	ori	r24, 0x20	; 32
    1e1e:	8c 93       	st	X, r24

    /*Get the first time stamp*/
    au16_t1 = MTIMER_ICR1;
    1e20:	e6 e4       	ldi	r30, 0x46	; 70
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05

    /*Trigger ICU at falling edge */
    CLEAR_BIT(MTIMER_TCCR1, 6);
    1e2c:	ae e4       	ldi	r26, 0x4E	; 78
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ee e4       	ldi	r30, 0x4E	; 78
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	8f 7b       	andi	r24, 0xBF	; 191
    1e3a:	11 96       	adiw	r26, 0x01	; 1
    1e3c:	9c 93       	st	X, r25
    1e3e:	8e 93       	st	-X, r24

    /*Waiting for selected edge to trigger ICU*/
    while(GET_BIT(MTIMER_TIFR, 5) == 0);
    1e40:	e8 e5       	ldi	r30, 0x58	; 88
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	82 95       	swap	r24
    1e48:	86 95       	lsr	r24
    1e4a:	87 70       	andi	r24, 0x07	; 7
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	81 70       	andi	r24, 0x01	; 1
    1e52:	90 70       	andi	r25, 0x00	; 0
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	a1 f3       	breq	.-24     	; 0x1e40 <mtimer_getPwmStatus+0x84>

    /*Clearing ICF1 flag*/
    SET_BIT(MTIMER_TIFR, 5);
    1e58:	a8 e5       	ldi	r26, 0x58	; 88
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e5       	ldi	r30, 0x58	; 88
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	80 62       	ori	r24, 0x20	; 32
    1e64:	8c 93       	st	X, r24

    /*Get the second time stamp*/
    au16_t2 = MTIMER_ICR1;
    1e66:	e6 e4       	ldi	r30, 0x46	; 70
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03

    /*Trigger ICU at rising edge */
    SET_BIT(MTIMER_TCCR1, 6);
    1e72:	ae e4       	ldi	r26, 0x4E	; 78
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	ee e4       	ldi	r30, 0x4E	; 78
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	80 64       	ori	r24, 0x40	; 64
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24

    /*Waiting for selected edge to trigger ICU*/
    while(GET_BIT(MTIMER_TIFR, 5) == 0);
    1e86:	e8 e5       	ldi	r30, 0x58	; 88
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	82 95       	swap	r24
    1e8e:	86 95       	lsr	r24
    1e90:	87 70       	andi	r24, 0x07	; 7
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	a1 f3       	breq	.-24     	; 0x1e86 <mtimer_getPwmStatus+0xca>

    /*Clearing ICF1 flag*/
    SET_BIT(MTIMER_TIFR, 5);
    1e9e:	a8 e5       	ldi	r26, 0x58	; 88
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e8 e5       	ldi	r30, 0x58	; 88
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 62       	ori	r24, 0x20	; 32
    1eaa:	8c 93       	st	X, r24

    /*Get the third time stamp*/
    au16_t3 = MTIMER_ICR1;
    1eac:	e6 e4       	ldi	r30, 0x46	; 70
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01

    /*Stop timer channel 1*/
    mtimer_stop(MTIMER_CHANNEL_1);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <mtimer_stop>

    /*Getting the duty cycle in %*/
    *pu8_dutyCycle = (u8_t)(( (f32_t)(au16_t2 - au16_t1) / (f32_t)(au16_t3 - au16_t1)) * 100.0);
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	a9 01       	movw	r20, r18
    1ec8:	48 1b       	sub	r20, r24
    1eca:	59 0b       	sbc	r21, r25
    1ecc:	ca 01       	movw	r24, r20
    1ece:	cc 01       	movw	r24, r24
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1edc:	7b 01       	movw	r14, r22
    1ede:	8c 01       	movw	r16, r24
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	a9 01       	movw	r20, r18
    1eea:	48 1b       	sub	r20, r24
    1eec:	59 0b       	sbc	r21, r25
    1eee:	ca 01       	movw	r24, r20
    1ef0:	cc 01       	movw	r24, r24
    1ef2:	a0 e0       	ldi	r26, 0x00	; 0
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	c8 01       	movw	r24, r16
    1f04:	b7 01       	movw	r22, r14
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	48 ec       	ldi	r20, 0xC8	; 200
    1f18:	52 e4       	ldi	r21, 0x42	; 66
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    1f30:	f8 85       	ldd	r31, Y+8	; 0x08
    1f32:	80 83       	st	Z, r24

    /*Getting the frequency in Hz*/
    *pu32_frequency = 250000 / (au16_t3 - au16_t1);
    1f34:	29 81       	ldd	r18, Y+1	; 0x01
    1f36:	3a 81       	ldd	r19, Y+2	; 0x02
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	48 1b       	sub	r20, r24
    1f40:	59 0b       	sbc	r21, r25
    1f42:	ca 01       	movw	r24, r20
    1f44:	9c 01       	movw	r18, r24
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	80 e9       	ldi	r24, 0x90	; 144
    1f4c:	90 ed       	ldi	r25, 0xD0	; 208
    1f4e:	a3 e0       	ldi	r26, 0x03	; 3
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__divmodsi4>
    1f5a:	da 01       	movw	r26, r20
    1f5c:	c9 01       	movw	r24, r18
    1f5e:	e9 85       	ldd	r30, Y+9	; 0x09
    1f60:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f62:	80 83       	st	Z, r24
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	a2 83       	std	Z+2, r26	; 0x02
    1f68:	b3 83       	std	Z+3, r27	; 0x03

	/*Return from this function*/
	return;
}
    1f6a:	2a 96       	adiw	r28, 0x0a	; 10
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	08 95       	ret

00001f84 <__mulsi3>:
    1f84:	62 9f       	mul	r22, r18
    1f86:	d0 01       	movw	r26, r0
    1f88:	73 9f       	mul	r23, r19
    1f8a:	f0 01       	movw	r30, r0
    1f8c:	82 9f       	mul	r24, r18
    1f8e:	e0 0d       	add	r30, r0
    1f90:	f1 1d       	adc	r31, r1
    1f92:	64 9f       	mul	r22, r20
    1f94:	e0 0d       	add	r30, r0
    1f96:	f1 1d       	adc	r31, r1
    1f98:	92 9f       	mul	r25, r18
    1f9a:	f0 0d       	add	r31, r0
    1f9c:	83 9f       	mul	r24, r19
    1f9e:	f0 0d       	add	r31, r0
    1fa0:	74 9f       	mul	r23, r20
    1fa2:	f0 0d       	add	r31, r0
    1fa4:	65 9f       	mul	r22, r21
    1fa6:	f0 0d       	add	r31, r0
    1fa8:	99 27       	eor	r25, r25
    1faa:	72 9f       	mul	r23, r18
    1fac:	b0 0d       	add	r27, r0
    1fae:	e1 1d       	adc	r30, r1
    1fb0:	f9 1f       	adc	r31, r25
    1fb2:	63 9f       	mul	r22, r19
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	e1 1d       	adc	r30, r1
    1fb8:	f9 1f       	adc	r31, r25
    1fba:	bd 01       	movw	r22, r26
    1fbc:	cf 01       	movw	r24, r30
    1fbe:	11 24       	eor	r1, r1
    1fc0:	08 95       	ret

00001fc2 <__divmodsi4>:
    1fc2:	97 fb       	bst	r25, 7
    1fc4:	09 2e       	mov	r0, r25
    1fc6:	05 26       	eor	r0, r21
    1fc8:	0e d0       	rcall	.+28     	; 0x1fe6 <__divmodsi4_neg1>
    1fca:	57 fd       	sbrc	r21, 7
    1fcc:	04 d0       	rcall	.+8      	; 0x1fd6 <__divmodsi4_neg2>
    1fce:	14 d0       	rcall	.+40     	; 0x1ff8 <__udivmodsi4>
    1fd0:	0a d0       	rcall	.+20     	; 0x1fe6 <__divmodsi4_neg1>
    1fd2:	00 1c       	adc	r0, r0
    1fd4:	38 f4       	brcc	.+14     	; 0x1fe4 <__divmodsi4_exit>

00001fd6 <__divmodsi4_neg2>:
    1fd6:	50 95       	com	r21
    1fd8:	40 95       	com	r20
    1fda:	30 95       	com	r19
    1fdc:	21 95       	neg	r18
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	4f 4f       	sbci	r20, 0xFF	; 255
    1fe2:	5f 4f       	sbci	r21, 0xFF	; 255

00001fe4 <__divmodsi4_exit>:
    1fe4:	08 95       	ret

00001fe6 <__divmodsi4_neg1>:
    1fe6:	f6 f7       	brtc	.-4      	; 0x1fe4 <__divmodsi4_exit>
    1fe8:	90 95       	com	r25
    1fea:	80 95       	com	r24
    1fec:	70 95       	com	r23
    1fee:	61 95       	neg	r22
    1ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff6:	08 95       	ret

00001ff8 <__udivmodsi4>:
    1ff8:	a1 e2       	ldi	r26, 0x21	; 33
    1ffa:	1a 2e       	mov	r1, r26
    1ffc:	aa 1b       	sub	r26, r26
    1ffe:	bb 1b       	sub	r27, r27
    2000:	fd 01       	movw	r30, r26
    2002:	0d c0       	rjmp	.+26     	; 0x201e <__udivmodsi4_ep>

00002004 <__udivmodsi4_loop>:
    2004:	aa 1f       	adc	r26, r26
    2006:	bb 1f       	adc	r27, r27
    2008:	ee 1f       	adc	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	a2 17       	cp	r26, r18
    200e:	b3 07       	cpc	r27, r19
    2010:	e4 07       	cpc	r30, r20
    2012:	f5 07       	cpc	r31, r21
    2014:	20 f0       	brcs	.+8      	; 0x201e <__udivmodsi4_ep>
    2016:	a2 1b       	sub	r26, r18
    2018:	b3 0b       	sbc	r27, r19
    201a:	e4 0b       	sbc	r30, r20
    201c:	f5 0b       	sbc	r31, r21

0000201e <__udivmodsi4_ep>:
    201e:	66 1f       	adc	r22, r22
    2020:	77 1f       	adc	r23, r23
    2022:	88 1f       	adc	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	1a 94       	dec	r1
    2028:	69 f7       	brne	.-38     	; 0x2004 <__udivmodsi4_loop>
    202a:	60 95       	com	r22
    202c:	70 95       	com	r23
    202e:	80 95       	com	r24
    2030:	90 95       	com	r25
    2032:	9b 01       	movw	r18, r22
    2034:	ac 01       	movw	r20, r24
    2036:	bd 01       	movw	r22, r26
    2038:	cf 01       	movw	r24, r30
    203a:	08 95       	ret

0000203c <__prologue_saves__>:
    203c:	2f 92       	push	r2
    203e:	3f 92       	push	r3
    2040:	4f 92       	push	r4
    2042:	5f 92       	push	r5
    2044:	6f 92       	push	r6
    2046:	7f 92       	push	r7
    2048:	8f 92       	push	r8
    204a:	9f 92       	push	r9
    204c:	af 92       	push	r10
    204e:	bf 92       	push	r11
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	ca 1b       	sub	r28, r26
    2066:	db 0b       	sbc	r29, r27
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	09 94       	ijmp

00002074 <__epilogue_restores__>:
    2074:	2a 88       	ldd	r2, Y+18	; 0x12
    2076:	39 88       	ldd	r3, Y+17	; 0x11
    2078:	48 88       	ldd	r4, Y+16	; 0x10
    207a:	5f 84       	ldd	r5, Y+15	; 0x0f
    207c:	6e 84       	ldd	r6, Y+14	; 0x0e
    207e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2080:	8c 84       	ldd	r8, Y+12	; 0x0c
    2082:	9b 84       	ldd	r9, Y+11	; 0x0b
    2084:	aa 84       	ldd	r10, Y+10	; 0x0a
    2086:	b9 84       	ldd	r11, Y+9	; 0x09
    2088:	c8 84       	ldd	r12, Y+8	; 0x08
    208a:	df 80       	ldd	r13, Y+7	; 0x07
    208c:	ee 80       	ldd	r14, Y+6	; 0x06
    208e:	fd 80       	ldd	r15, Y+5	; 0x05
    2090:	0c 81       	ldd	r16, Y+4	; 0x04
    2092:	1b 81       	ldd	r17, Y+3	; 0x03
    2094:	aa 81       	ldd	r26, Y+2	; 0x02
    2096:	b9 81       	ldd	r27, Y+1	; 0x01
    2098:	ce 0f       	add	r28, r30
    209a:	d1 1d       	adc	r29, r1
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	ed 01       	movw	r28, r26
    20a8:	08 95       	ret

000020aa <itoa>:
    20aa:	fb 01       	movw	r30, r22
    20ac:	9f 01       	movw	r18, r30
    20ae:	e8 94       	clt
    20b0:	42 30       	cpi	r20, 0x02	; 2
    20b2:	c4 f0       	brlt	.+48     	; 0x20e4 <itoa+0x3a>
    20b4:	45 32       	cpi	r20, 0x25	; 37
    20b6:	b4 f4       	brge	.+44     	; 0x20e4 <itoa+0x3a>
    20b8:	4a 30       	cpi	r20, 0x0A	; 10
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <itoa+0x1c>
    20bc:	97 fb       	bst	r25, 7
    20be:	1e f4       	brtc	.+6      	; 0x20c6 <itoa+0x1c>
    20c0:	90 95       	com	r25
    20c2:	81 95       	neg	r24
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	64 2f       	mov	r22, r20
    20c8:	77 27       	eor	r23, r23
    20ca:	0e 94 86 10 	call	0x210c	; 0x210c <__udivmodhi4>
    20ce:	80 5d       	subi	r24, 0xD0	; 208
    20d0:	8a 33       	cpi	r24, 0x3A	; 58
    20d2:	0c f0       	brlt	.+2      	; 0x20d6 <itoa+0x2c>
    20d4:	89 5d       	subi	r24, 0xD9	; 217
    20d6:	81 93       	st	Z+, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	a1 f7       	brne	.-24     	; 0x20c6 <itoa+0x1c>
    20de:	16 f4       	brtc	.+4      	; 0x20e4 <itoa+0x3a>
    20e0:	5d e2       	ldi	r21, 0x2D	; 45
    20e2:	51 93       	st	Z+, r21
    20e4:	10 82       	st	Z, r1
    20e6:	c9 01       	movw	r24, r18
    20e8:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <strrev>

000020ec <strrev>:
    20ec:	dc 01       	movw	r26, r24
    20ee:	fc 01       	movw	r30, r24
    20f0:	67 2f       	mov	r22, r23
    20f2:	71 91       	ld	r23, Z+
    20f4:	77 23       	and	r23, r23
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <strrev+0x4>
    20f8:	32 97       	sbiw	r30, 0x02	; 2
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <strrev+0x18>
    20fc:	7c 91       	ld	r23, X
    20fe:	6d 93       	st	X+, r22
    2100:	70 83       	st	Z, r23
    2102:	62 91       	ld	r22, -Z
    2104:	ae 17       	cp	r26, r30
    2106:	bf 07       	cpc	r27, r31
    2108:	c8 f3       	brcs	.-14     	; 0x20fc <strrev+0x10>
    210a:	08 95       	ret

0000210c <__udivmodhi4>:
    210c:	aa 1b       	sub	r26, r26
    210e:	bb 1b       	sub	r27, r27
    2110:	51 e1       	ldi	r21, 0x11	; 17
    2112:	07 c0       	rjmp	.+14     	; 0x2122 <__udivmodhi4_ep>

00002114 <__udivmodhi4_loop>:
    2114:	aa 1f       	adc	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	a6 17       	cp	r26, r22
    211a:	b7 07       	cpc	r27, r23
    211c:	10 f0       	brcs	.+4      	; 0x2122 <__udivmodhi4_ep>
    211e:	a6 1b       	sub	r26, r22
    2120:	b7 0b       	sbc	r27, r23

00002122 <__udivmodhi4_ep>:
    2122:	88 1f       	adc	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	5a 95       	dec	r21
    2128:	a9 f7       	brne	.-22     	; 0x2114 <__udivmodhi4_loop>
    212a:	80 95       	com	r24
    212c:	90 95       	com	r25
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	08 95       	ret

00002134 <_exit>:
    2134:	f8 94       	cli

00002136 <__stop_program>:
    2136:	ff cf       	rjmp	.-2      	; 0x2136 <__stop_program>
